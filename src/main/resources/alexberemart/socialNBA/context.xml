<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                           http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.1.xsd">

    <import resource="classpath:/Alexberemart/core/context.xml"/>

    <!-- Allows us to use system properties as variables in this configuration
       file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="order" value="0"/>
        <property name="locations">
            <list>
                <value>classpath:alexberemart/socialNBA/twitter4j.properties</value>
                <value>classpath:alexberemart/socialNBA/socialNBA.properties</value>
            </list>
        </property>
    </bean>

    <bean id="dataSourceSocialNBA" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName">
            <value>${socialNBA.datasource.driver}</value>
        </property>
        <property name="url">
            <value>${socialNBA.datasource.url}</value>
        </property>
        <property name="username">
            <value>${socialNBA.datasource.db.username}</value>
        </property>
        <property name="password">
            <value>${socialNBA.datasource.db.password}</value>
        </property>
        <property name="testOnBorrow">
            <value>true</value>
        </property>
        <property name="validationQuery">
            <value>select 1</value>
        </property>
    </bean>

    <!-- Hibernate SessionFactory definition -->
    <bean id="sessionFactorySocialNBA"
          class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="hibernateProperties">
            <props>
                <prop key="javax.persistence.validation.mode">NONE</prop>
                <prop key="hibernate.dialect">${core.hibernate.dialect.classname}</prop>
                <prop key="hibernate.hbm2ddl.auto">${socialNBA.hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.use_sql_comments">true</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.HashtableCacheProvider</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.query.substitutions">true 1, false 0</prop>
                <prop key="hibernate.generate_statistics">true</prop>
                <!--<prop key="hibernate.connection.useUnicode">true</prop>-->
                <!--<prop key="hibernate.connection.characterEncoding">utf8mb4</prop>-->
            </props>
        </property>
        <property name="dataSource">
            <ref bean="dataSourceSocialNBA"/>
        </property>
        <property name="packagesToScan" value="${socialNBA.sessionfactory.packagestoscan}"/>
    </bean>

    <!-- Hibernate templates definition -->
    <bean id="hibernateTemplateSocialNBA" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory">
            <ref local="sessionFactorySocialNBA"/>
        </property>
        <property name="flushModeName">
            <value>FLUSH_AUTO</value>
        </property>
        <property name="allowCreate">
            <value>true</value>
        </property>
        <property name="alwaysUseNewSession">
            <value>false</value>
        </property>
        <property name="cacheQueries">
            <value>false</value>
        </property>
        <property name="queryCacheRegion">
            <value>dcpQCR</value>
        </property>
        <property name="maxResults">
            <value>10000</value>
        </property>
        <property name="fetchSize">
            <value>10000</value>
        </property>
    </bean>

    <!-- Local transaction manager for a single JDBC source by ussing Hibernate -->
    <bean id="transactionManagerSocialNBA"
          class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory">
            <ref local="sessionFactorySocialNBA"/>
        </property>
    </bean>

    <bean id="twitDAO"
          class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager">
            <ref bean="transactionManagerSocialNBA"/>
        </property>
        <property name="target">
            <ref local="twitDAOTarget"/>
        </property>
        <property name="transactionAttributes">
            <props>
                <prop key="makePersistent">PROPAGATION_REQUIRED</prop>
                <prop key="find*">PROPAGATION_REQUIRED, readOnly</prop>
            </props>
        </property>
    </bean>

    <bean id="twitDAOTarget"
          class="alexberemart.socialNBA.model.dao.impl.TwitDAOImpl">
        <qualifier value="target"/>
        <property name="hibernateTemplate">
            <ref bean="hibernateTemplateSocialNBA"/>
        </property>
    </bean>

    <bean id="playerEntryDAO"
          class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager">
            <ref bean="transactionManagerSocialNBA"/>
        </property>
        <property name="target">
            <ref local="playerEntryDAOTarget"/>
        </property>
        <property name="transactionAttributes">
            <props>
                <prop key="makePersistent">PROPAGATION_REQUIRED</prop>
                <prop key="find*">PROPAGATION_REQUIRED, readOnly</prop>
            </props>
        </property>
    </bean>

    <bean id="playerEntryDAOTarget"
          class="alexberemart.socialNBA.model.dao.impl.PlayerEntryDAOImpl">
        <qualifier value="target"/>
        <property name="hibernateTemplate">
            <ref bean="hibernateTemplateSocialNBA"/>
        </property>
    </bean>

    <bean id="matchDAO"
          class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager">
            <ref bean="transactionManagerSocialNBA"/>
        </property>
        <property name="target">
            <ref local="matchDAOTarget"/>
        </property>
        <property name="transactionAttributes">
            <props>
                <prop key="makePersistent">PROPAGATION_REQUIRED</prop>
                <prop key="find*">PROPAGATION_REQUIRED, readOnly</prop>
            </props>
        </property>
    </bean>

    <bean id="matchDAOTarget"
          class="alexberemart.socialNBA.model.dao.impl.MatchDAOImpl">
        <qualifier value="target"/>
        <property name="hibernateTemplate">
            <ref bean="hibernateTemplateSocialNBA"/>
        </property>
    </bean>

    <bean id="twitServices" class="alexberemart.socialNBA.services.TwitServices"/>
    <bean id="basketReferenceServices" class="alexberemart.socialNBA.services.basketReference.BasketReferenceServices"/>
    <bean id="playerEntryServices" class="alexberemart.socialNBA.services.PlayerEntryServices"/>
    <bean id="matchServices" class="alexberemart.socialNBA.services.MatchServices"/>

    <!-- FACTORIES -->
    <bean id="twitFactory" class="alexberemart.socialNBA.model.factories.TwitFactory"/>
    <bean id="playerEntryFactory" class="alexberemart.socialNBA.model.factories.basketReference.PlayerEntryFactory"/>
    <bean id="matchFactory" class="alexberemart.socialNBA.model.factories.MatchFactory"/>
    <bean id="minutesFactory" class="alexberemart.socialNBA.model.factories.basketReference.MinutesFactory"/>
    <bean id="numberFactory" class="alexberemart.socialNBA.model.factories.basketReference.NumberFactory"/>

    <bean id="oauthCredentials" class="alexberemart.socialNBA.model.vo.OauthCredentials">
        <property name="consumerKey" value="${oauth.consumerKey}"/>
        <property name="consumerSecretKey" value="${oauth.consumerSecret}"/>
        <property name="accessToken" value="${oauth.accessToken}"/>
        <property name="accessSecretToken" value="${oauth.accessTokenSecret}"/>
    </bean>

    <context:component-scan base-package="alexberemart"/>

</beans>